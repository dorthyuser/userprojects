{
  "script": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst mysql = require('mysql');\nconst dbConfig = {\n    host: process.env.DB_HOST || 'your_database_host',\n    user: process.env.DB_USER || 'your_database_user',\n    password: process.env.DB_PASSWORD || 'your_database_password',\n    database: process.env.DB_NAME || 'your_database_name',\n    port: process.env.DB_PORT || 3000\n};\nconst connection = mysql.createConnection(dbConfig);\n\napp.use(bodyParser.json());\n\napp.get('/orders', (req, res) => {\n    const orderId = req.query.orderid;\n    const authorization = req.headers['authorization'];\n    if (!authorization) {\n        return res.status(401).json({ error: 'Unauthorized access' });\n    }\n    const query = 'SELECT * FROM orders WHERE orderId = ?';\n    connection.query(query, [orderId], (err, results) => {\n        if (err) {\n            console.error('Error fetching order:', err);\n            return res.status(500).json({ error: 'Error fetching order' });\n        }\n        if (results.length === 0) {\n            return res.status(404).json({ error: 'Order not found' });\n        }\n        const order = results[0];\n        res.json({\n            orderId: order.orderId,\n            customer: {\n                firstName: order.firstName,\n                lastName: order.lastName,\n                email: order.email\n            }\n        });\n    });\n});\n\napp.post('/orders', (req, res) => {\n    const authorization = req.headers['authorization'];\n    if (!authorization) {\n        return res.status(401).json({ error: 'Unauthorized access' });\n    }\n    const { productid, productname, customer } = req.body;\n    const insertQuery = 'INSERT INTO orders (productid, productname, firstName, lastName, email) VALUES (?, ?, ?, ?, ?)';\n    connection.query(insertQuery, [productid, productname, customer.firstName, customer.lastName, customer.email], (err, results) => {\n        if (err) {\n            console.error('Error creating order:', err);\n            return res.status(500).json({ result: 'FAILED', error: 'Error creating order' });\n        }\n        res.json({\n            orderId: results.insertId,\n            result: 'SUCCESS'\n        });\n    });\n});\n\napp.listen(3000, () => {\n    console.log('Server is running on port 3000');\n});"
}